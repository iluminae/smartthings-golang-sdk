info:
  title: SmartThings SmartApps API
  version: v1.0.3
schemes:
- https
basePath: /
produces:
- application/json
tags:
- name: SmartApps
  description: |
    SmartThings SmartApps are client integrations built on top of the SmartThings platform.  These applications
    are written in a technology chosen by the developer, and registered with the SmartThings platform.  The API
    documented here details out what your client can expect when invoked by the SmartThings platform.
paths:
  /:
    post:
      summary: Execute a third-party SmartApp.
      description: |
        Execute a SmartThings SmartApp. Each SmartThings app execution is expected to contain the information outlined in the ExecutionRequest.
      operationId: execute
      parameters:
      - name: executionRequest
        in: body
        required: true
        schema:
          $ref: '#/definitions/ExecutionRequest'
      responses:
        default:
          description: Execution response.
          schema:
            $ref: '#/definitions/ExecutionResponse'
      tags: [
        ]
definitions:
  ExecutionRequest:
    description: |
      The root model for all executions.  An execution request is compositional in nature.  Client's can
      expect exactly one *Data field set depending on the type of execution.  For example, if execution is
      of type EVENT, the "eventData" field will be set.
    type: object
    properties:
      lifecycle:
        $ref: '#/definitions/AppLifecycle'
      executionId:
        description: This is a correlation id that is assigned to the execution that
          is useful for support requests.
        type: string
        format: uuid
        example: b328f242-c602-4204-8d73-33c48ae180af
      appId:
        description: A globally unique identifier for the application being executed.
          It should match the ID of the application itself.
        type: string
        format: uuid
        example: 9871bcc7-36d8-4b5a-ad46-de1645b8ff3e
      locale:
        description: An IETF BCP 47 language tag representing the chosen locale for
          this account.
        type: string
        example: en
      version:
        description: The version of the execution's request model.
        type: string
        example: 1.0.0
      client:
        $ref: '#/definitions/ClientDetails'
      eventData:
        $ref: '#/definitions/EventData'
      installData:
        $ref: '#/definitions/InstallData'
      updateData:
        $ref: '#/definitions/UpdateData'
      uninstallData:
        $ref: '#/definitions/UninstallData'
      configurationData:
        $ref: '#/definitions/ConfigurationData'
      pingData:
        $ref: '#/definitions/PingData'
      oauthCallbackData:
        $ref: '#/definitions/OAuthCallbackData'
      executeData:
        $ref: '#/definitions/ExecuteData'
      dashboardData:
        $ref: '#/definitions/DashboardData'
      confirmationData:
        $ref: '#/definitions/ConfirmationData'
      settings:
        description: Global settings as defined on the App.
        type: object
        additionalProperties:
          type: string
  ExecutionResponse:
    description: |
      Expected response structure for an SmartApp execution.  An execution response is compositional in nature.  Client's should
      set exactly one *Data field depending on the type of execution.  For example, if the execution request's lifecycle was of type EVENT,
      the "eventData" field should be returned.
    type: object
    properties:
      statusCode:
        type: integer
      eventData:
        $ref: '#/definitions/EventResponseData'
      installData:
        $ref: '#/definitions/InstallResponseData'
      updateData:
        $ref: '#/definitions/UpdateResponseData'
      uninstallData:
        $ref: '#/definitions/UninstallResponseData'
      configurationData:
        $ref: '#/definitions/ConfigurationResponseData'
      pingData:
        $ref: '#/definitions/PingResponseData'
      oauthCallbackData:
        $ref: '#/definitions/OAuthCallbackResponseData'
      executeData:
        description: |
          A custom JSON formatted response object with a maximum size of 64kb.
        type: object
      dashboardData:
        $ref: '#/definitions/DashboardResponseData'
  Permissions:
    description: A list of permissions associated with this execution. See `securityDefinitions`
      for more information.
    type: array
    items:
      type: string
  StringConfig:
    description: A simple string configuration.
    type: object
    properties:
      value:
        description: A config value
        type: string
        maxLength: 2048
    example:
      value: 31192dc9-eb45-4d90-b606-21e9b66d8c2b
  DeviceConfig:
    description: A device configuration.
    type: object
    properties:
      deviceId:
        description: The ID of the device.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      componentId:
        description: The component ID on the device.
        type: string
        format: ^[-_!.~'()*0-9a-zA-Z]{1,36}$
    example:
      deviceId: 31192dc9-eb45-4d90-b606-21e9b66d8c2b
      componentId: main
  ModeConfig:
    description: A mode configuration.
    type: object
    properties:
      modeId:
        description: The ID of the mode.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
    example:
      modeId: 9206ea57-2e2e-414c-a792-9087117ca3d8
  SceneConfig:
    description: A scene configuration.
    type: object
    properties:
      sceneId:
        description: The ID of the scene.
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
    example:
      sceneId: 9206ea57-2e2e-414c-a792-9087117ca3d8
  MessageConfig:
    description: A message configuration.
    type: object
    properties:
      messageGroupKey:
        description: The key value of the message group.
        type: string
        format: ^[a-zA-Z0-9._]{1,36}$
    example:
      messageGroupKey: leaks
  ConfigEntry:
    description: A configuration value type and the correspodning configuration.
    type: object
    properties:
      valueType:
        type: string
        default: STRING
        enum:
        - STRING
        - DEVICE
        - MODE
        - SCENE
        - MESSAGE
        description: |
          The value type.
          * A valueType of STRING will have a stringConfig field present.
          * A valueType of DEVICE will have a deviceConfig field present.
          * A valueType of MODE will have a modeConfig field present.
          * A valueType of SCENE will have a sceneConfig field present.
          * A valueType of MESSAGE will have a messageConfig field present.
      stringConfig:
        $ref: '#/definitions/StringConfig'
      deviceConfig:
        $ref: '#/definitions/DeviceConfig'
      modeConfig:
        $ref: '#/definitions/ModeConfig'
      sceneConfig:
        $ref: '#/definitions/SceneConfig'
      messageConfig:
        $ref: '#/definitions/MessageConfig'
    example:
      valueType: DEVICE
      deviceConfig:
        deviceId: 31192dc9-eb45-4d90-b606-21e9b66d8c2b
        componentId: main
  ConfigEntries:
    description: A list of available configuration values.
    type: array
    items:
      $ref: '#/definitions/ConfigEntry'
  ConfigMap:
    description: |
      A map of configurations for an Installed App.  The map 'key' is the configuration name
      and the 'value' is an array of strings.
    type: object
    additionalProperties:
      $ref: '#/definitions/ConfigEntries'
  ExecuteData:
    description: The data payload to an execution request with an AppLifecycle of
      EXECUTE.
    type: object
    required:
    - authToken
    - installedApp
    - parameters
    properties:
      authToken:
        description: An OAuth token to use when calling into SmartThings API's.
        type: string
      installedApp:
        $ref: '#/definitions/InstalledApp'
      parameters:
        description: An arbitrary map of input parameters which the SmartApp can use
          to build a custom response.
        type: object
        additionalProperties:
          type: string
  AppLifecycle:
    description: |
      Every invocation of a SmartApp is associated to a specific lifecycle event.  These lifecycles include:
      * INSTALL - Lifecycle that will be invoked once at the time of installation of a SmartApp.
      * UPDATE - Invoked when a user modifies the configuration values assigned to the SmartApp.
      * UNINSTALL - A clean up lifecycle invoked upon the deletion of an SmartApp from a user's account.
      * EVENT - Lifecycle event used when the SmartApp is invoked as the result of a subscription or schedule.
      * PING - Lifecycle used during App creation to verify connectivity, and ownership of a particular target.
      * CONFIGURATION - Lifecycle used to drive the UX during the installation process of a SmartApp into a user's account.
      * OAUTH_CALLBACK - Lifecycle used for integrations that implement a third-party OAuth out.
      * CONFIRMATION - Lifecycle used to send confirmation link to a SmartApp for ownership validation.
    type: string
    enum:
    - INSTALL
    - UPDATE
    - UNINSTALL
    - EVENT
    - PING
    - CONFIGURATION
    - OAUTH_CALLBACK
    - CONFIRMATION
  EventData:
    description: The data payload to an execution request with an AppLifecycle of
      EVENT.
    type: object
    required:
    - authToken
    - installedApp
    - event
    properties:
      authToken:
        description: An OAuth token to use when calling into SmartThings API's.
        type: string
      installedApp:
        $ref: '#/definitions/InstalledApp'
      events:
        type: array
        items:
          $ref: '#/definitions/Event'
  InstallData:
    description: The data payload to an execution request with an AppLifecycle of
      INSTALL.
    type: object
    required:
    - authToken
    - refreshToken
    - installedApp
    properties:
      authToken:
        description: An OAuth token to use when calling into SmartThings API's.
        type: string
      refreshToken:
        description: |
          A refresh token which maybe used to obtain authorization to SmartThings API after expiration of the authToken.
          An integration will need to use this refreshToken to support calling the SmartThings API outside the context
          of an event.
        type: string
      installedApp:
        $ref: '#/definitions/InstalledApp'
  UpdateData:
    description: The data payload to an execution request with an AppLifecycle of
      UPDATE.
    type: object
    required:
    - authToken
    - installedApp
    - previousConfig
    - previousPermissions
    properties:
      authToken:
        description: An OAuth token to use when calling into SmartThings API's.
        type: string
      refreshToken:
        description: |
          A refresh token which maybe used to obtain authorization to SmartThings API after expiration of the authToken.
          An integration will need to use this refreshToken to support calling the SmartThings API outside the context
          of an event.
        type: string
      installedApp:
        $ref: '#/definitions/InstalledApp'
      previousConfig:
        $ref: '#/definitions/ConfigMap'
      previousPermissions:
        $ref: '#/definitions/Permissions'
  UninstallData:
    description: The data payload to an execution request with an AppLifecycle of
      UNINSTALL.
    type: object
    required:
    - installedApp
    properties:
      installedApp:
        $ref: '#/definitions/InstalledApp'
  InstalledApp:
    description: The information associated with this installed app.
    type: object
    properties:
      installedAppId:
        description: The id of the installed app.
        type: string
        format: uuid
      locationId:
        description: The location that the installed App is associated with
        type: string
        format: ^(?:([0-9a-fA-F]{32})|([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))$
      config:
        $ref: '#/definitions/ConfigMap'
      permissions:
        $ref: '#/definitions/Permissions'
    example:
      installedAppId: d692699d-e7a6-400d-a0b7-d5be96e7a564
      locationId: e675a3d9-2499-406c-86dc-8a492a886494
      config:
        contactSensor:
        - valueType: DEVICE
          deviceConfig:
            deviceId: e457978e-5e37-43e6-979d-18112e12c961
            componentId: main
        lightSwitch:
        - valueType: DEVICE
          deviceConfig:
            deviceId: 74aac3bb-91f2-4a88-8c49-ae5e0a234d76
            componentId: main
        minutes:
        - valueType: STRING
          stringConfig:
            value: '5'
      permissions:
      - r:devices:e457978e-5e37-43e6-979d-18112e12c961
      - r:devices:74aac3bb-91f2-4a88-8c49-ae5e0a234d76
      - x:devices:74aac3bb-91f2-4a88-8c49-ae5e0a234d76
  PingData:
    description: |
      A request to ping a SmartApp to ensure connectivity.
    type: object
    required:
    - challenge
    properties:
      challenge:
        description: A challenge phrase that the SmartApp must echo back to validate
          itself.
        type: string
  ConfirmationData:
    description: |
      A request to send a confirmation link to a SmartApp for ownership validation.
      type: object
    type: object
    properties:
      appId:
        type: string
        format: uuid
        description: A globally unique identifier for an app.
      confirmationUrl:
        description: |
          An HTTPS url that may be visted to confirm / activate an App registration.
        type: string
        format: url
  ConfigurationData:
    description: |
      A request for a pages flow to drive app installation.  This will only be available for executions of type "CONFIGURATION".
    type: object
    required:
    - phase
    properties:
      installedAppId:
        description: The id of the installed app.
        type: string
        format: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
      phase:
        $ref: '#/definitions/ConfigurationPhase'
      pageId:
        description: A developer defined page ID. Must be URL safe characters.
        type: string
        format: ^[a-zA-Z0-9.-_]{1,36}$
      previousPageId:
        description: The previous page the user completed. Must be URL safe characters.
        type: string
        format: ^[a-zA-Z0-9.-_]{1,36}$
      config:
        $ref: '#/definitions/ConfigMap'
  OAuthCallbackData:
    description: |
      Provides intergration with the result of a third party oauth attempt.  This will only be available for executions of type "OAUTH_CALLBACK".
    type: object
    properties:
      installedAppId:
        description: The id of the installed app.
        type: string
        format: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
      urlPath:
        description: |
          A relative URL containing all of the query string parameters as returned by the third party oauth system. A SmartApp can
          parse the `urlPath` property to extract any senstive auth codes/tokens which can then be used to access the third party system.
        type: string
  EventResponseData:
    description: |
      Empty object response for an Event lifecycle execution.
    type: object
  InstallResponseData:
    description: |
      Empty object response for an Install lifecycle execution.
    type: object
  UpdateResponseData:
    description: |
      Empty object response for an Update lifecycle execution.
    type: object
  UninstallResponseData:
    description: |
      Empty object response for an Uninstall lifecycle execution.
    type: object
  ConfigurationResponseData:
    description: |
      Expected response for a Configuration lifecycle execution.  ConfigurationResponseData follows a compositional
      structure.
      * When a request is made for the INITIALIZE phase, a InitializeInstall model should be returned.
      * When a request is made for the PAGE phase, a Page model should be returned.
    type: object
    properties:
      initialize:
        $ref: '#/definitions/InitializeSetting'
      page:
        $ref: '#/definitions/Page'
  PingResponseData:
    description: |
      Expected response for a Ping lifecycle execution.
    type: object
    properties:
      challenge:
        description: An echo of the challenge that was provided on the request.
        type: string
  OAuthCallbackResponseData:
    description: |
      Empty object response for an OAuth Callback lifecycle execution.
    type: object
  Page:
    type: object
    properties:
      name:
        description: Name of the page to be configured.
        type: string
        maxLength: 128
      pageId:
        description: A developer defined page ID. Must be URL safe characters.
        type: string
        format: ^[a-zA-Z0-9.-_]{1,36}$
      nextPageId:
        description: A developer defined page ID for the next page in the configuration
          process. Must be URL safe characters.
        type: string
        format: ^[a-zA-Z0-9.-_]{1,36}$
      previousPageId:
        description: A developer defined page ID for the previous page in the configuration
          process. Must be URL safe characters.
        type: string
        format: ^[a-zA-Z0-9.-_]{1,36}$
      complete:
        description: Indicates if this is the last page in the configuration process.
        type: boolean
        default: false
      style:
        description: Change how the page is presented
        type: string
        default: NORMAL
        enum:
        - NORMAL
        - SPLASH
      nextText:
        description: The text for the next button. Only applies if style is `SPLASH`
        type: string
        maxLength: 128
      sections:
        description: The display sections for user defined settings.
        type: array
        items:
          $ref: '#/definitions/Section'
  Section:
    type: object
    properties:
      name:
        description: Name of the section.
        type: string
        maxLength: 128
      hideable:
        description: Whether or not the section can be collapsed
        type: boolean
        default: false
      hidden:
        description: If section can be collapsed, whether or not it defaults to hidden
        type: boolean
        default: false
      style:
        description: Change how the section is presented
        type: string
        default: NORMAL
        enum:
        - NORMAL
        - FOOTER
      settings:
        description: |
          Configuration settings represent the questions asked to the end user installing an integration the answers to
          which provide the configuration for which the integration will use when executing. Settings follow an inheritance
          pattern.  The type field dictates the expected instance of setting that is provided.
        type: array
        items:
          $ref: '#/definitions/SectionSetting'
  ConfigurationPhase:
    description: Denotes the current installation phase.
    type: string
    enum:
    - INITIALIZE
    - PAGE
  SettingType:
    description: Denotes the type of setting.
    type: string
    enum:
    - DEVICE
    - DATE
    - TEXT
    - PASSWORD
    - BOOLEAN
    - ENUM
    - MODE
    - SCENE
    - LINK
    - PAGE
    - IMAGE
    - IMAGES
    - VIDEO
    - TIME
    - PARAGRAPH
    - EMAIL
    - DECIMAL
    - NUMBER
    - PHONE
    - OAUTH
    - SOUND
    - COLOR
    - MESSAGE_GROUP
  StyleType:
    description: Style of the setting.
    type: string
    enum:
    - COMPLETE
    - ERROR
    - DEFAULT
  EnumStyleType:
    description: Style of the setting.
    type: string
    enum:
    - COMPLETE
    - ERROR
    - DEFAULT
    - DROPDOWN
  LinkStyleType:
    description: Style of the setting.
    type: string
    enum:
    - COMPLETE
    - ERROR
    - DEFAULT
    - BUTTON
  Setting:
    type: object
    properties:
      id:
        description: A developer defined configuration ID.
        type: string
        format: ^[a-zA-Z0-9.-_]+$
        maxLength: 128
      name:
        description: Name of the setting to be configured.
        type: string
        maxLength: 128
      description:
        description: Description of the app to be configured.
        type: string
        maxLength: 2048
  InitializeSetting:
    description: The initial setting to be returned when starting a new configuration
      install.
    allOf:
    - $ref: '#/definitions/Setting'
    - type: object
      properties:
        firstPageId:
          description: A developer defined page ID of the first page to display. Must
            be URL safe characters.
          type: string
          format: ^[a-zA-Z0-9.-_]{1,36}$
        disableCustomDisplayName:
          description: Disable the ability for the user to customize the display name.
          type: boolean
          default: false
        disableRemoveApp:
          description: Disable the ability to remove the app from the configuration
            flow.
          type: boolean
          default: false
        permissions:
          type: array
          items:
            type: string
  SectionSetting:
    allOf:
    - $ref: '#/definitions/Setting'
    - type: object
      discriminator: type
      required:
      - type
      properties:
        required:
          description: Indicates if this setting is required for configuration.
          type: boolean
          default: false
        disabled:
          description: Indicates if this setting should be disabled
          type: boolean
          default: false
        type:
          $ref: '#/definitions/SettingType'
  DeviceSetting:
    description: Device Setting
    x-discriminator-value: DEVICE
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        multiple:
          description: Indicates if this device setting can have multiple values.
          type: boolean
          default: false
        closeOnSelection:
          description: Indicates if this input should close on selection.
          type: boolean
          default: true
        submitOnChange:
          description: Indicates if this input should refresh configs after a change
            in value.
          type: boolean
          default: false
        preselect:
          description: Indicates if the first device in the list of options should
            be pre selected.
          type: boolean
          default: false
        capabilities:
          description: The required capabilities for the device(s) options.
          type: array
          items:
            type: string
            maxLength: 128
        excludeCapabilities:
          description: The excluded capabilities for the device(s) options.
          type: array
          items:
            type: string
            maxLength: 128
        permissions:
          description: The required permissions for the selected device(s).
          type: array
          items:
            type: string
            enum:
            - r
            - x
            - w
        style:
          $ref: '#/definitions/StyleType'
  OAuthSetting:
    description: OAuth Setting
    x-discriminator-value: OAUTH
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        urlTemplate:
          description: |
            The url to use for the OAuth service.
            Use __SmartThingsOAuthCallback__ in the template for the callback/redirect url you need to provide to the OAuth service.
          type: string
          maxLength: 2048
          example: http://www.smartthings.com/oauth?param1=1&param2=2&callback=__SmartThingsOAuthCallback__
        style:
          $ref: '#/definitions/StyleType'
  TimeSetting:
    description: Time Setting
    x-discriminator-value: TIME
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        image:
          description: The image url.
          type: string
          maxLength: 2048
        max:
          description: The maximum inclusive value the time can be set to (only the
            time will be used out of the date time).
          type: string
          format: date-time
        min:
          description: The minimum inclusive value the time can be set to (only the
            time will be used out of the date time).
          type: string
          format: date-time
        submitOnChange:
          description: Indicates if this input should refresh configs after a change
            in value.
          type: boolean
          default: false
  TextSetting:
    description: Text Setting
    x-discriminator-value: TEXT
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        maxLength:
          description: The maximum length the text can have.
          type: integer
        minLength:
          description: The minimum length the text can have.
          type: integer
        image:
          description: The image url.
          type: string
          maxLength: 2048
        postMessage:
          description: A string to be shown after the text input field.
          type: string
          maxLength: 10
  PasswordSetting:
    description: Password Setting
    x-discriminator-value: PASSWORD
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        maxLength:
          description: The maximum length the password can have.
          type: integer
        minLength:
          description: The minimum length the password can have.
          type: integer
        image:
          description: The image url.
          type: string
          maxLength: 2048
  PhoneSetting:
    description: Phone Setting
    x-discriminator-value: PHONE
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        image:
          description: The image url.
          type: string
          maxLength: 2048
  EmailSetting:
    description: Email Setting
    x-discriminator-value: EMAIL
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        image:
          description: The image url.
          type: string
          maxLength: 2048
  NumberSetting:
    description: Number Setting
    x-discriminator-value: NUMBER
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        max:
          description: The maximum inclusive value the number can be set to.
          type: integer
        min:
          description: The minumum inclusive value the number can be set to.
          type: integer
        step:
          description: The increment to step by.
          type: integer
          default: 1
        style:
          description: The way to style the number input.
          type: string
          enum:
          - SLIDER
        image:
          description: The image url.
          type: string
          maxLength: 2048
        postMessage:
          description: A string to be shown after the text input field.
          type: string
          maxLength: 10
  DecimalSetting:
    description: DECIMAL Setting
    x-discriminator-value: DECIMAL
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        max:
          description: The maximum inclusive value the decimal can be set to.
          type: integer
        min:
          description: The minumum inclusive value the decimal can be set to.
          type: integer
        image:
          description: The image url.
          type: string
          maxLength: 2048
        postMessage:
          description: A string to be shown after the text input field.
          type: string
          maxLength: 10
  BooleanSetting:
    description: Boolean Setting
    x-discriminator-value: BOOLEAN
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        image:
          description: The image url.
          type: string
          maxLength: 2048
        submitOnChange:
          description: Indicates if this input should refresh configs after a change
            in value.
          type: boolean
          default: false
  ParagraphSetting:
    description: Paragraph Setting
    x-discriminator-value: PARAGRAPH
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        image:
          description: The image url.
          type: string
          maxLength: 2048
  LinkSetting:
    description: URL link Setting
    x-discriminator-value: LINK
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        url:
          description: The page to navigate to.
          type: string
          maxLength: 2048
        image:
          description: The image url.
          type: string
          maxLength: 2048
        style:
          $ref: '#/definitions/LinkStyleType'
  PageSetting:
    description: Jump to page Setting
    x-discriminator-value: PAGE
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        page:
          description: The page to navigate to.
          type: string
          maxLength: 128
        image:
          description: The image url.
          type: string
          maxLength: 2048
        style:
          $ref: '#/definitions/LinkStyleType'
  ImageSetting:
    description: Image Setting
    x-discriminator-value: IMAGE
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        image:
          description: The image url.
          type: string
          maxLength: 2048
  ImagesSetting:
    description: Images Setting
    x-discriminator-value: IMAGES
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        images:
          description: The images to display.
          type: array
          items:
            description: The image url.
            type: string
            maxLength: 2048
  VideoSetting:
    description: Video Setting
    x-discriminator-value: VIDEO
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        video:
          description: The video url.
          type: string
          maxLength: 2048
        image:
          description: The image url.
          type: string
          maxLength: 2048
  EnumSetting:
    description: Enum Setting
    x-discriminator-value: ENUM
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        multiple:
          description: Indicates if this enum setting can have multiple values.
          type: boolean
          default: false
        closeOnSelection:
          description: Indicates if this input should close on selection.
          type: boolean
          default: true
        groupedOptions:
          description: Display the enum options as groups.
          type: array
          items:
            $ref: '#/definitions/GroupedOption'
        options:
          description: The enum options.
          type: array
          items:
            $ref: '#/definitions/Option'
        submitOnChange:
          description: Indicates if this input should refresh configs after a change
            in value.
          type: boolean
          default: false
        style:
          $ref: '#/definitions/EnumStyleType'
  ModeSetting:
    description: Mode Setting
    x-discriminator-value: MODE
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        multiple:
          description: Indicates if this enum setting can have multiple values.
          type: boolean
          default: false
        closeOnSelection:
          description: Indicates if this input should close on selection.
          type: boolean
          default: true
        submitOnChange:
          description: Indicates if this input should refresh configs after a change
            in value.
          type: boolean
          default: false
        style:
          $ref: '#/definitions/StyleType'
  SceneSetting:
    description: Scene Setting
    x-discriminator-value: SCENE
    allOf:
    - $ref: '#/definitions/SectionSetting'
    - type: object
      properties:
        defaultValue:
          description: A default value for the setting.
          type: string
          maxLength: 128
        multiple:
          description: Indicates if this scene setting can have multiple values.
          type: boolean
          default: false
        closeOnSelection:
          description: Indicates if this input should close on selection.
          type: boolean
          default: true
        submitOnChange:
          description: Indicates if this input should refresh configs after a change
            in value.
          type: boolean
          default: false
        style:
          $ref: '#/definitions/StyleType'
  GroupedOption:
    type: object
    properties:
      name:
        description: The display name of this group of enum options.
        type: string
        maxLength: 128
      options:
        description: The enum options.
        type: array
        items:
          $ref: '#/definitions/Option'
  Option:
    type: object
    properties:
      id:
        description: The unique ID for this option.
        type: string
        maxLength: 128
      name:
        description: The display name for this option.
        type: string
        maxLength: 128
  ClientDetails:
    type: object
    description: |
      Known details about the client application from which the request was initiated.  This information is provided
      on best effort basis.  All properties maybe null or empty.
    properties:
      os:
        description: The operating system of the client application initiating the
          request.
        type: string
        maxLength: 16
      version:
        description: The version of the client application initiating the request.
        type: string
        maxLength: 16
      language:
        type: string
        maxLength: 250
        description: Language header representing the client's preferred language.
          The format of the `Accept-Language` header follows what is defined in [RFC
          7231, section 5.3.5](https://tools.ietf.org/html/rfc7231#section-5.3.5)
      supportedTemplates:
        description: Templates that could be renderable in the client
        type: array
        items:
          type: string
          enum:
          - BASIC_V1
          - BASIC_V2
  DashboardData:
    description: The data payload to an execution request with an AppLifecycle of
      DASHBOARD.
    type: object
    required:
    - authToken
    - installedApp
    properties:
      authToken:
        description: An OAuth token to use when calling into SmartThings API's.
        type: string
      installedApp:
        $ref: '#/definitions/InstalledApp'
  DashboardResponseData:
    description: |
      Expected response for a Dashboard lifecycle execution.
    type: object
    properties:
      serviceName:
        description: A unique identifier for a card of service
        type: string
        format: some service name
      cards:
        description: list of card object
        type: array
        items:
          $ref: '#/definitions/DashboardCard'
        minItems: 1
        maxItems: 5
  DashboardCardTemplate:
    description: |
      A directive to the SmartThings client to use a specific template for rendering the dashboard card.
      Each card template may have a different set requirement for data needs.

      * BASIC_V1 - The basic / default template.
      * FREE_FORM - A free form template with minimal constraints.
    type: string
    enum:
    - BASIC_V1
    - BASIC_V2
    - FREE_FORM
  DashboardCard:
    description: payload of dashboard card
    type: object
    required:
    - templateId
    - cardId
    properties:
      templateId:
        $ref: '#/definitions/DashboardCardTemplate'
      cardId:
        description: A unique identifier for a card of service
        type: string
        format: ^[a-z0-9.-_]{1,36}$
        example: some-card-id
      basicV1:
        $ref: '#/definitions/BasicCard'
      basicV2:
        $ref: '#/definitions/BasicV2Card'
      freeForm:
        $ref: '#/definitions/FreeFormCard'
  BasicCard:
    description: Data requirements for a Basic V1 card template.
    type: object
    properties:
      name:
        description: name of the card
        type: string
        maxLength: 100
        example: Smart Home Monitor
      iconUrl:
        description: A title icon url for card. Angit  HTTPS URL is required.
        type: string
        maxLength: 250
        format: uri
        example: https://smart-home-monitor.com/image
      bgImage:
        $ref: '#/definitions/BasicBackgroundImage'
      body:
        $ref: '#/definitions/BasicBody'
      buttons:
        description: A list of buttons to render and buttons must be of the same type.
        type: array
        maxItems: 3
        items:
          $ref: '#/definitions/BasicButton'
  BasicV2Card:
    description: Data requirements for a Basic V2 card template.
    type: object
    properties:
      iconUrl:
        description: An title icon url for card. A HTTPS URL is required.
        type: string
        maxLength: 250
        format: uri
        example: https://smart-home-monitor.com/image.png
      name:
        description: name of the card
        type: string
        maxLength: 250
        example: Smart Home Monitor
      description:
        description: sublined text of the card
        type: string
        maxLength: 250
        example: Smart Home Monitor
      bgImage:
        $ref: '#/definitions/BasicBackgroundImage'
      body:
        $ref: '#/definitions/BasicV2Body'
      buttons:
        description: A list of buttons to render and buttons must be of the same type.
        type: array
        maxItems: 3
        items:
          $ref: '#/definitions/BasicV2Button'
  FreeFormCard:
    type: object
    properties:
      attributes:
        description: |
          An arbitrary set of key / value pairs useful for passing any custom metadata.

          * Supports a maximum of 5 entries.
          * Maximum key length: 36 Unicode characters in UTF-8
          * Maximum value length: 1000 Unicode characters in UTF-8
          * Allowed characters for *keys* are letters, plus the following special characters: `:`, `_`
          * Allowed characters for *values* are letters, whitespace, and numbers, plus the following special characters: `+`, `-`, `=`, `.`, `_`, `:`, `/`
          * If you need characters outside this allowed set, you can apply standard base-64 encoding.
        type: object
        additionalProperties:
          type: string
  BasicBackgroundImage:
    description: A background image.
    type: object
    properties:
      url:
        description: URL of image.  HTTPS url is required.
        type: string
        maxLength: 250
        format: uri
      color:
        description: some color code
        type: string
        format: ^[a-fA-F0-9]{6}$
      alpha:
        description: transparency of the color/image
        type: number
        format: ^[0-1]{1}$
  BasicImagePosition:
    description: Position of where the image should be rendered within card.
    type: string
    enum:
    - LEFT
    - CENTER
    - RIGHT
  BasicImage:
    type: object
    properties:
      name:
        type: string
        maxLength: 100
        description: An icon name.
      position:
        $ref: '#/definitions/BasicImagePosition'
      url:
        type: string
        maxLength: 250
        format: uri
        description: URL of image.  HTTPS url is required.
  BasicText:
    description: A text object.
    type: object
    properties:
      content:
        description: Text to display.
        type: string
        maxLength: 500
  BasicBody:
    description: Body definition for a Basic V1 template.
    type: object
    properties:
      image:
        $ref: '#/definitions/BasicImage'
      text:
        $ref: '#/definitions/BasicText'
  BasicButtonType:
    description: |
      The type of buttons to render.

      * TEXT - A colored button with a text overrlay.
      * ICON - A button with an image backgroup and text overrlay.
    type: string
    enum:
    - TEXT
    - ICON
  BasicTextButton:
    description: A text button definition for a basic template.
    type: object
    properties:
      name:
        description: The name of the button
        type: string
        maxLength: 100
      position:
        $ref: '#/definitions/BasicButtonPosition'
      action:
        $ref: '#/definitions/Action'
  BasicIconButton:
    description: A text button definition for a basic template.
    type: object
    properties:
      name:
        description: The name of the button
        type: string
        maxLength: 100
      position:
        $ref: '#/definitions/BasicButtonPosition'
      action:
        $ref: '#/definitions/Action'
      iconUrl:
        description: A default icon image url. HTTPS url required.
        type: string
        maxLength: 250
        format: uri
  BasicButtonPosition:
    description: Position of where the button should be rendered within card.
    type: string
    enum:
    - LEFT
    - CENTER
    - RIGHT
  BasicButton:
    description: A button definition for a Basic V1 template.
    type: object
    properties:
      type:
        $ref: '#/definitions/BasicButtonType'
      textButton:
        $ref: '#/definitions/BasicTextButton'
      iconButton:
        $ref: '#/definitions/BasicIconButton'
  ActionType:
    description: |
      The type of action to take when UI element is activated.

      * LAUNCH_PLUGIN - Launch a corresponding UI plugin.
      * EXECUTE - Execute an API call to the backing SmartApp.
    type: string
    enum:
    - LAUNCH_PLUGIN
    - EXECUTE
  LaunchPluginAction:
    description: Launch a backing UI plugin in SmartThings Client.
    type: object
    properties:
      pluginId:
        description: The ID of the plugin to launch.
        type: string
        format: ^[a-zA-Z._]{1,99}$
      uri:
        description: parameter to be passed to plugin
        type: string
  ExecuteAction:
    description: Call the EXECUTE lifecycle on the backing SmartApp.
    type: object
    properties:
      parameters:
        description: An arbitrary map of input parameters which the SmartApp can use
          to build a custom response.
        type: object
        additionalProperties:
          type: string
  Action:
    description: A definition of the action to be taken when button is activated.
    type: object
    properties:
      type:
        $ref: '#/definitions/ActionType'
      launchPlugin:
        $ref: '#/definitions/LaunchPluginAction'
      execute:
        $ref: '#/definitions/ExecuteAction'
  BasicV2Body:
    description: Body definition for a Basic V2 template.
    type: object
    properties:
      image:
        $ref: '#/definitions/BasicV2Image'
      items:
        $ref: '#/definitions/BasicV2Items'
      text:
        $ref: '#/definitions/BasicV2Text'
  BasicV2Image:
    type: object
    properties:
      position:
        $ref: '#/definitions/BasicImagePosition'
      url:
        type: string
        maxLength: 250
        format: uri
        description: URL of image.  HTTPS url is required.
      action:
        $ref: '#/definitions/Action'
  BasicV2Items:
    description: Body item array definition for a Basic V2 template
    type: array
    maxItems: 4
    items:
      $ref: '#/definitions/BasicV2Item'
  BasicV2Item:
    description: Item in Basic V2 items
    type: object
    properties:
      item:
        $ref: '#/definitions/BasicV2ImageItem'
  BasicV2ImageItem:
    description: Body item object definition for a Basic V2 template
    type: object
    properties:
      url:
        description: URL of image.  HTTPS url is required.
        type: string
        maxLength: 250
        format: uri
      description:
        type: string
        maxLength: 250
        description: The text that would be shown under image
      bgImage:
        $ref: '#/definitions/BasicBackgroundImage'
      action:
        $ref: '#/definitions/Action'
  BasicV2Text:
    description: A text object.
    type: object
    properties:
      content:
        description: Text to display.
        type: string
        maxLength: 500
      action:
        $ref: '#/definitions/Action'
  BasicV2Button:
    description: A button definition for a Basic V2 template.
    type: object
    properties:
      type:
        $ref: '#/definitions/BasicButtonType'
      textButton:
        $ref: '#/definitions/BasicV2TextButton'
      iconButton:
        $ref: '#/definitions/BasicV2IconButton'
  BasicV2TextButton:
    description: A text button definition for a basic V2 template.
    type: object
    properties:
      name:
        description: The name of the button
        type: string
        maxLength: 100
      action:
        $ref: '#/definitions/Action'
  BasicV2IconButton:
    description: A text button definition for a basic V2 template.
    type: object
    properties:
      name:
        description: The name of the button
        type: string
        maxLength: 100
      releasedIconUrl:
        description: An icon image url on button-released. HTTPS url required.
        type: string
        maxLength: 250
        format: uri
        example: https://smart-home-monitor.com/image.png
      pressedIconUrl:
        description: An icon image url on button-pressed. HTTPS url required.
        type: string
        maxLength: 250
        format: uri
        example: https://smart-home-monitor.com/image.png
      action:
        $ref: '#/definitions/Action'
  Event:
    description: The event information, only populated if the execution type is EVENT.
    type: object
    properties:
      eventTime:
        description: The IS0-8601 date time string in UTC that this event was created.
        type: string
        format: date-time
      eventType:
        $ref: '#/definitions/EventType'
      deviceEvent:
        $ref: '#/definitions/DeviceEvent'
      deviceLifecycleEvent:
        $ref: '#/definitions/DeviceLifecycleEvent'
      deviceHealthEvent:
        $ref: '#/definitions/DeviceHealthEvent'
      deviceCommandsEvent:
        $ref: '#/definitions/DeviceCommandsEvent'
      modeEvent:
        $ref: '#/definitions/ModeEvent'
      timerEvent:
        $ref: '#/definitions/TimerEvent'
      sceneLifecycleEvent:
        $ref: '#/definitions/SceneLifecycleEvent'
      securityArmStateEvent:
        $ref: '#/definitions/SecurityArmStateEvent'
  EventType:
    description: |
      The type of event passed to the app being executed. The type will be one of:
        * DEVICE_COMMANDS_EVENT - _Only applicable for cloud-to-cloud device integration apps._ An event as a result of a device command execution request.
        * DEVICE_EVENT - A device event as a result of a subscription the app created.
        * DEVICE_HEALTH_EVENT - A device health event as a result of a change in a device's health.
        * DEVICE_LIFECYCLE_EVENT - A device lifecycle event as the result of a life change to the device.
        * MODE_EVENT - A mode event is triggered when the location's mode is changed.
        * SCENE_LIFECYCLE_EVENT - A scene lifecycle event as a result of a life change to the scene.
        * SECURITY_ARM_STATE_EVENT - A security arm state event as a result of a change in the arm state of a security system.
        * TIMER_EVENT - An event as a result of a scheduled app execution.
    type: string
    enum:
    - DEVICE_COMMANDS_EVENT
    - DEVICE_EVENT
    - DEVICE_HEALTH_EVENT
    - DEVICE_LIFECYCLE_EVENT
    - MODE_EVENT
    - SCENE_LIFECYCLE_EVENT
    - SECURITY_ARM_STATE_EVENT
    - TIMER_EVENT
  DeviceCommandsEvent:
    description: An event that contains commands for devices that were created by
      this app.
    type: object
    properties:
      eventId:
        description: The id of the event.
        type: string
      deviceId:
        type: string
        description: The guid of the device that the commands are for.
      profileId:
        type: string
        description: The device profile ID of the device instance.
      externalId:
        type: string
        description: The external ID that was set during install of a device.
      commands:
        type: array
        items:
          $ref: '#/definitions/DeviceCommandsEventCommand'
  DeviceCommandsEventCommand:
    type: object
    properties:
      componentId:
        type: string
        example: main
      capability:
        type: string
        example: switch
      command:
        type: string
        example: 'on'
      arguments:
        type: array
        items:
          type: object
        example: [
          ]
  DeviceEvent:
    description: An event on a device that matched a subscription for this app.
    type: object
    properties:
      eventId:
        description: The ID of the event.
        type: string
        example: 736e3903-001c-4d40-b408-ff40d162a06b
      locationId:
        description: The ID of the location in which the event was triggered.
        type: string
        example: 499e28ba-b33b-49c9-a5a1-cce40e41f8a6
      deviceId:
        description: The ID of the device associated with the DEVICE_EVENT.
        type: string
        example: 6f5ea629-4c05-4a90-a244-cc129b0a80c3
      componentId:
        description: The name of the component on the device that the event is associated
          with.
        type: string
        example: main
      capability:
        description: The name of the capability associated with the DEVICE_EVENT.
        type: string
        example: motionSensor
      attribute:
        description: The name of the DEVICE_EVENT. This typically corresponds to an
          attribute name of the device-handler’s capabilities.
        type: string
        example: motion
      value:
        description: |
          The value of the event. The type of the value is dependent on the capability's attribute type.
        type: object
        example: active
      valueType:
        description: |
          The root level data type of the value field. The data types are representitive of standard JSON data types.
        type: string
        example: number
      stateChange:
        description: Whether or not the state of the device has changed as a result
          of the DEVICE_EVENT.
        type: boolean
      data:
        description: json map as defined by capability data schema
        type: object
      subscriptionName:
        description: The name of subscription that caused delivery.
        type: string
        example: motion_sensors
  DeviceHealthEvent:
    description: An event that represents a change in the health of the a device.
    type: object
    properties:
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The id of the location in which the event was triggered.
        type: string
      deviceId:
        description: The id of the device.
        type: string
      hubId:
        description: The id of the hub.
        type: string
      status:
        description: |
          The status of the device.
        type: string
        enum:
        - OFFLINE
        - ONLINE
        - UNHEALTHY
      reason:
        description: |
          The reason the device is offline.
        type: string
        enum:
        - NONE
        - SERVICE_UNAVAILABLE
        - HUB_OFFLINE
        - ZWAVE_OFFLINE
        - ZIGBEE_OFFLINE
        - BLUETOOTH_OFFLINE
        - HUB_DISCONNECTED
  DeviceLifecycle:
    description: |
      The device lifecycle. The lifecycle will be one of:
      * CREATE - Invoked when a device is created.
      * DELETE - Invoked when a device is deleted.
      * UPDATE - Invoked when a device is updated.
      * MOVE_FROM - Invoked when a device is moved from a location.
      * MOVE_TO - Invoked when a device is moved to a location.
    type: string
    enum:
    - CREATE
    - DELETE
    - UPDATE
    - MOVE_FROM
    - MOVE_TO
  DeviceLifecycleCreate:
    description: |
      Create device lifecycle.
    type: object
  DeviceLifecycleDelete:
    description: |
      Delete device lifecycle.
    type: object
  DeviceLifecycleEvent:
    description: A device lifecycle event.
    type: object
    properties:
      lifecycle:
        $ref: '#/definitions/DeviceLifecycle'
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The id of the location in which the event was triggered.
        type: string
      deviceId:
        description: The id of the device.
        type: string
      deviceName:
        description: The name of the device
        type: string
      principal:
        description: The principal that made the change
        type: string
      create:
        $ref: '#/definitions/DeviceLifecycleCreate'
      delete:
        $ref: '#/definitions/DeviceLifecycleDelete'
      update:
        $ref: '#/definitions/DeviceLifecycleUpdate'
      moveFrom:
        $ref: '#/definitions/DeviceLifecycleMove'
      moveTo:
        $ref: '#/definitions/DeviceLifecycleMove'
  DeviceLifecycleMove:
    description: |
      Move device lifecycle.
    type: object
    properties:
      locationId:
        type: string
  DeviceLifecycleUpdate:
    description: |
      Update device lifecycle.
    type: object
  ModeEvent:
    type: object
    properties:
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The id of the location in which the event was triggered.
        type: string
      modeId:
        description: The ID of the mode associated with a MODE_EVENT.
        type: string
  SceneLifecycle:
    description: |
      The scene lifecycle. The lifecycle will be one of:
      * CREATE - Invoked when a scene is created.
      * UPDATE - Invoked when a scene is updated.
      * DELETE - Invoked when a scene is deleted.
    type: string
    enum:
    - CREATE
    - UPDATE
    - DELETE
  SceneLifecycleCreate:
    description: |
      Create scene lifecycle.
    type: object
  SceneLifecycleDelete:
    description: |
      Delete scene lifecycle.
    type: object
  SceneLifecycleEvent:
    description: A scene lifecycle event.
    type: object
    properties:
      lifecycle:
        $ref: '#/definitions/SceneLifecycle'
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The id of the location in which the event was triggered.
        type: string
      sceneId:
        description: The id of the scene.
        type: string
      create:
        $ref: '#/definitions/SceneLifecycleCreate'
      update:
        $ref: '#/definitions/SceneLifecycleUpdate'
      delete:
        $ref: '#/definitions/SceneLifecycleDelete'
  SceneLifecycleUpdate:
    description: |
      Update scene lifecycle.
    type: object
  SecurityArmStateEvent:
    description: |
      An event that represents a change in the arm state of a security system.
    type: object
    properties:
      eventId:
        description: The id of the event.
        type: string
      locationId:
        description: The id of the location in which the event was triggered.
        type: string
      armState:
        description: |
          The arm state of a security system.
        type: string
        enum:
        - UNKNOWN
        - ARMED_STAY
        - ARMED_AWAY
        - DISARMED
      optionalArguments:
        description: |
          A set of key / value pairs useful for passing any optional arguments.
        type: object
        additionalProperties:
          $ref: '#/definitions/SimpleValue'
  SimpleValue:
    description: A simple value.
    type: object
    properties:
      valueType:
        description: |
          The type of the value.
        type: string
        enum:
        - NULL_VALUE
        - INT_VALUE
        - DOUBLE_VALUE
        - STRING_VALUE
        - BOOLEAN_VALUE
      intValue:
        type: integer
      doubleValue:
        type: number
        format: double
      stringValue:
        type: string
      boolValue:
        type: boolean
  TimerEvent:
    description: An event that is caused by a schedule for this app being fired.
    type: object
    properties:
      eventId:
        description: The ID of the event.
        type: string
      name:
        description: The name of the schedule that caused this event.
        type: string
        example: lights_off_timeout
      type:
        $ref: '#/definitions/TimerType'
      time:
        description: The IS0-8601 date time strings in UTC that this event was scheduled
          for.
        type: string
        format: date-time
        example: 2017-08-04T12:44:18Z
      expression:
        description: The CRON expression if the schedule was of type CRON.
        type: string
  TimerType:
    description: The type of TIMER_EVENT.
    type: string
    enum:
    - CRON
    - ONCE
swagger: '2.0'
host: smartapps
